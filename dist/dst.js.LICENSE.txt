/*
Like markdown-it-simplemath, this is a stripped down, simplified version of:
https://github.com/runarberg/markdown-it-math

It differs in that it takes (a subset of) LaTeX as input and relies on KaTeX
for rendering output.
*/

/*                                                  viniculum
                                                   /
         /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraViniculum
        / █████████████████████←0.04em (40 unit) std viniculum thickness
       / /
      / /
     / /\
    / / surd
*/

/* " " */

/* "0" */

/* "9" */

/* && !functions[name].primitive*/

/* 0 */

/* 1 */

/* 1em quad */

/* Process inline math */

/* \t */

/* harmony default export */

/*#__PURE__*/

/**
   * Add a given token to the token stack.  In particular, this get be used
   * to put back a token returned from one of the other methods.
   */

/**
   * Append an array of tokens to the token stack.
   */

/**
   * Both arguments are optional.  The first argument is an object of
   * built-in mappings which never change.  The second argument is an object
   * of initial (global-level) mappings, which will constantly change
   * according to any global/top-level `set`s done.
   */

/**
   * Call a function handler with a suitable context and arguments.
   */

/**
   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
   * instead, "error" translates to a return value of `true`, while "ignore"
   * translates to a return value of `false`.  May still print a warning:
   * "warn" prints a warning and returns `false`.
   * This is for the second category of `errorCode`s listed in the README.
   */

/**
   * Check whether to test potentially dangerous input, and return
   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
   * should be an object with `command` field specifying the relevant LaTeX
   * command (as a string starting with `\`), and any other arguments, etc.
   * If `context` has a `url` field, a `protocol` field will automatically
   * get added by this function (changing the specified object).
   */

/**
   * Checks a result to make sure it has the right type, and throws an
   * appropriate error otherwise.
   */

/**
   * Consume all following space tokens, without expansion.
   */

/**
   * Consume the specified number of arguments from the token stream,
   * and return the resulting array of arguments.
   */

/**
   * Converts the math node into a MathML-namespaced DOM element.
   */

/**
   * Converts the math node into a string, similar to innerText, but escaped.
   */

/**
   * Converts the math node into a string, similar to innerText.
   */

/**
   * Converts the math node into a string, similar to innerText. Applies to
   * MathDomNode's only.
   */

/**
   * Converts the math node into an HTML markup string.
   */

/**
   * Converts the text node into a DOM text node.
   */

/**
   * Converts the text node into a string
   * (representing the text iteself).
   */

/**
   * Converts the text node into escaped HTML markup
   * (representing the text itself).
   */

/**
   * Converts the textual input of an unsupported command into a text node
   * contained within a color node whose color is determined by errorColor
   */

/**
   * Create a Space node with width given in CSS ems.
   */

/**
   * Create a new options object with "phantom" set to true.
   */

/**
   * Create a new options object with the given color.
   */

/**
   * Create a new options objects with the given fontFamily.
   */

/**
   * Creates a new options object with the given font weight
   */

/**
   * Creates a new options object with the given math font or old text font.
   * @type {[type]}
   */

/**
   * Creates a text node or span from a symbol node. Note that a span is only
   * created if it is needed.
   */

/**
   * Creates markup for a symbol node.
   */

/**
   * Current KaTeX version
   */

/**
   * Detect whether `name` has a definition.  Equivalent to
   * `get(name) != null`.
   */

/**
   * Determine whether a command is currently "defined" (has some
   * functionality), meaning that it's a macro (in the current group),
   * a function, a symbol, or one of the special commands listed in
   * `implicitCommands`.
   */

/**
   * Determine whether a command is expandable.
   */

/**
   * Discard any space tokens, fetching the next non-space token.
   */

/**
   * Discards the current lookahead token, considering it consumed.
   */

/**
   * End current group nesting within all namespaces.
   */

/**
   * End current nested group, restoring values before the group began.
   */

/**
   * Expand the next token only once (if possible), and return the resulting
   * top token on the stack (without removing anything from the stack).
   * Similar in behavior to TeX's `\expandafter\futurelet`.
   * Equivalent to expandOnce() followed by future().
   */

/**
   * Expand the next token only once if possible.
   *
   * If the token is expanded, the resulting tokens will be pushed onto
   * the stack in reverse order and will be returned as an array,
   * also in reverse order.
   *
   * If not, the next token will be returned without removing it
   * from the stack.  This case can be detected by a `Token` return value
   * instead of an `Array` return value.
   *
   * In either case, the next token will be on the top of the stack,
   * or the stack will be empty.
   *
   * Used to implement `expandAfterFuture` and `expandNextToken`.
   *
   * At the moment, macro expansion doesn't handle delimited macros,
   * i.e. things like those defined by \def\foo#1\end{…}.
   * See the TeX book page 202ff. for details on how those should behave.
   *
   * If expandableOnly, only expandable tokens are expanded and
   * an undefined control sequence results in an error.
   */

/**
   * Expose the dom tree node types, which can be useful for type checking nodes.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */

/**
   * Feed a new input string to the same MacroExpander
   * (with existing macros etc.).
   */

/**
   * Form ligature-like combinations of characters for text mode.
   * This includes inputs like "--", "---", "``" and "''".
   * The result will simply replace multiple textord nodes with a single
   * character in each value by a single textord node having multiple
   * characters in its value.  The representation is still ASCII source.
   * The group will be modified in place.
   */

/**
   * Fully expand the given macro name and return the result as a string,
   * or return `undefined` if no such macro is defined.
   */

/**
   * Fully expand the given macro name and return the resulting list of
   * tokens, or return `undefined` if no such macro is defined.
   */

/**
   * Fully expand the given token stream and return the resulting list of tokens
   */

/**
   * Get a text or display version of this style.
   */

/**
   * Get the cramped version of a style (in particular, cramping a cramped style
   * doesn't change the style).
   */

/**
   * Get the current value of a name, or `undefined` if there is no value.
   *
   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
   * is defined, as the definition may be the empty string which evaluates
   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
   * `if (namespace.has(...))`.
   */

/**
   * Get the style of a fraction denominator given the fraction in the current
   * style.
   */

/**
   * Get the style of a fraction numerator given the fraction in the current
   * style.
   */

/**
   * Get the style of a subscript given a base in the current style.
   */

/**
   * Get the style of a superscript given a base in the current style.
   */

/**
   * Gets an attribute on a MathML node.
   */

/**
   * Gets the CSS color of the current options object
   */

/**
   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
   * the whole input range enclosed by these two.
   */

/**
   * Handle a subscript or superscript with nice errors.
   */

/**
   * If `optional` is false or absent, this parses an ordinary group,
   * which is either a single nucleus (like "x") or an expression
   * in braces (like "{x+y}") or an implicit group, a group that starts
   * at the current position, and ends right before a higher explicit
   * group ends, or at EOF.
   * If `optional` is true, it parses either a bracket-delimited expression
   * (like "[x+y]") or returns null to indicate the absence of a
   * bracket-enclosed group.
   * If `mode` is present, switches to that mode while parsing the group,
   * and switches back after.
   */

/**
   * KaTeX error, usually during parsing.
   */

/**
   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
   * changes to at least `\textstyle`.
   */

/**
   * Main parsing function, which parses an entire input.
   */

/**
   * Merges two `SourceLocation`s from location providers, given they are
   * provided in order of appearance.
   * - Returns the first one's location if only the first is provided.
   * - Returns a merged range of the first and the last if both are provided
   *   and their lexers match.
   * - Otherwise, returns null.
   */

/**
   * Parse a single symbol out of the string. Here, we handle single character
   * symbols and special functions like \verb.
   */

/**
   * Parses a color description.
   */

/**
   * Parses a group when the mode is changing.
   */

/**
   * Parses a group with optional super/subscripts.
   */

/**
   * Parses a group, essentially returning the string formed by the
   * brace-enclosed tokens plus some position information.
   */

/**
   * Parses a regex-delimited group: the largest sequence of tokens
   * whose concatenated strings match `regex`. Returns the string
   * formed by the tokens plus some position information.
   */

/**
   * Parses a size specification, consisting of magnitude and unit.
   */

/**
   * Parses an "expression", which is a list of atoms.
   *
   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
   *                 happens when functions have higher precendence han infix
   *                 nodes in implicit parses.
   *
   * `breakOnTokenText`: The text of the token that the expression should end
   *                     with, or `null` if something else should end the
   *                     expression.
   */

/**
   * Parses an URL, checking escaped letters and allowed protocols,
   * and setting the catcode of % as an active character (as in \hyperref).
   */

/**
   * Parses an entire function, including its base and all of its arguments.
   */

/**
   * Parses the arguments of a function or environment
   */

/**
   * Parses the given LaTeX into KaTeX's internal parse tree structure,
   * without rendering to HTML or MathML.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */

/**
   * Recursively expand first token, then return first non-expandable token.
   */

/**
   * Remove and return the next unexpanded token.
   */

/**
   * Remove the effect of sizing changes such as \Huge.
   * Keep the effect of the current style, such as \scriptstyle.
   */

/**
   * Renders the given LaTeX into an HTML internal DOM tree representation,
   * without MathML and without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */

/**
   * Renders the given LaTeX into an HTML+MathML combination string,
   * for sending to the client.
   */

/**
   * Renders the given LaTeX into an HTML+MathML combination, and adds
   * it as a child to the specified DOM node.
   */

/**
   * Renders the given LaTeX into an HTML+MathML internal DOM tree
   * representation, without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */

/**
   * Report nonstrict (non-LaTeX-compatible) input.
   * Can safely not be called if `this.strict` is false in JavaScript.
   */

/**
   * Return an options object with a cramped version of the current style. If
   * the current style is cramped, returns `this`.
   */

/**
   * Return an options object with the given size and in at least `\textstyle`.
   * Returns `this` if appropriate.
   */

/**
   * Return an options object with the given style. If `this.style === style`,
   * returns `this`.
   */

/**
   * Return the CSS sizing classes required to switch from enclosing options
   * `oldOptions` to `this`. Returns an array of classes.
   */

/**
   * Return the CSS sizing classes required to switch to the base size. Like
   * `this.havingSize(BASESIZE).sizingClasses(this)`.
   */

/**
   * Return the current lookahead token, or if there isn't one (at the
   * beginning, or if the previous lookahead token was consume()d),
   * fetch the next token as the new lookahead token and return it.
   */

/**
   * Return the font metrics for this size.
   */

/**
   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
   */

/**
   * Returns a new options object with the same properties as "this".  Properties
   * from "extension" will be copied to the new options object.
   */

/**
   * Returns the expanded macro as a reversed array of tokens and a macro
   * argument count.  Or returns `null` if no such macro.
   */

/**
   * Returns the topmost token on the stack, without expanding it.
   * Similar in behavior to TeX's `\futurelet`.
   */

/**
   * Rewrites infix operators such as \over with corresponding commands such
   * as \frac.
   *
   * There can only be one infix operator per group.  If there's more than one
   * then the expression is ambiguous.  This can be resolved by adding {}.
   */

/**
   * Set the current value of a name, and optionally set it globally too.
   * Local set() sets the current value and (when appropriate) adds an undo
   * operation to the undo stack.  Global set() may change the undo
   * operation at every level, so takes time linear in their number.
   */

/**
   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
   * all browsers support attributes the same, and having too many custom
   * attributes is probably bad.
   */

/**
   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
   * semantic content, so this is used heavily.
   */

/**
   * Start a new group nesting within all namespaces.
   */

/**
   * Start a new nested group, affecting future local `set`s.
   */

/**
   * Switches between "text" and "math" modes.
   */

/**
   * The base size index.
   */

/**
   * This function lexes a single token.
   */

/**
   * adds a new macro to builtin macro list
   */

/**
   * adds a new symbol to builtin symbols table
   */

/**
   * extends internal font metrics object with a new object
   * each key in the new object represents a font name
  */

/**
 * A flattened version of all the supported blocks in a single array.
 * This is an optimization to make supportedCodepoint() fast.
 */

/**
 * All registered environments.
 * `environments.js` exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary via `environments.js`.
 */

/**
 * Asserts that the node is of the given type and returns it with stricter
 * typing. Throws if the node's type does not match.
 */

/**
 * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
 * into an unbreakable HTML node of class .base, with proper struts to
 * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
 * make up the entire expression as a sequence of unbreakable units.
 */

/**
 * Converts verb group into body string.
 *
 * \verb* replaces each space with an open box \u2423
 * \verb replaces each space with a no-break space \xA0
 */

/**
 * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
 * That document sorts characters into groups by font type, say bold or italic.
 *
 * In the arrays below, each subarray consists three elements:
 *      * The CSS class of that group when in math mode.
 *      * The CSS class of that group when in text mode.
 *      * The font name, so that KaTeX can get font metrics.
 */

/**
 * Escapes text to prevent scripting attacks.
 */

/**
 * Get the font metrics for a given size.
 */

/**
 * Get the metrics for a given symbol and font, after transformation (i.e.
 * after following replacement from symbols.js)
 */

/**
 * Given a codepoint, return the name of the script or script family
 * it is from, or null if it is not part of a known block
 */

/**
 * Given a codepoint, return true if it falls within one of the
 * scripts or script families defined above and false otherwise.
 *
 * Micro benchmarks shows that this is faster than
 * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
 * in Firefox, Chrome and Node.
 */

/**
 * Lexing or parsing positional information for error reporting.
 * This object is immutable.
 */

/**
 * Parse an expression and return the parse tree.
 */

/**
 * Parse and build an expression, and return the markup for that.
 */

/**
 * Parse the body of the environment, with rows delimited by \\ and
 * columns delimited by &, and create a nested list in row-major order
 * with one group per cell.  If given an optional argument style
 * ("text", "display", etc.), then each cell is cast into that style.
 */

/**
 * Parses an expression using a Parser, then returns the parsed result.
 */

/**
 * Provides a single function for parsing an expression using a Parser
 * TODO(emily): Remove this
 */

/**
 * Puts a delimiter span in a given style, and adds appropriate height, depth,
 * and maxFontSizes.
 */

/**
 * Return whether an element is contained in a list
 */

/**
 * Returns the node more strictly typed iff it is of the given type. Otherwise,
 * returns null.
 */

/**
 * Sometimes we want to pull out the innermost element of a group. In most
 * cases, this will just be the group itself, but when ordgroups and colors have
 * a single element, we want to pull that out.
 */

/**
 * Take an entire parse tree, and build it into an appropriate set of HTML
 * nodes.
 */

/**
 * Takes a full parse tree and settings and builds a MathML representation of
 * it. In particular, we put the elements from building the parse tree into a
 * <semantics> tag so we can also include that TeX source as an annotation.
 *
 * Note that we actually return a domTree element with a `<math>` inside it so
 * we can do appropriate styling.
 */

/**
 * These objects store data about MathML nodes. This is the MathML equivalent
 * of the types in domTree.js. Since MathML handles its own rendering, and
 * since we're mainly using MathML to improve accessibility, we don't manage
 * any of the styling state that the plain DOM nodes do.
 *
 * The `toNode` and `toMarkup` functions work simlarly to how they do in
 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
 */

/**
 * This file contains a list of utility functions which are useful in other
 * files.
 */

/**
 * This file contains metrics regarding fonts and individual symbols. The sigma
 * and xi variables, as well as the metricMap map contain data extracted from
 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
 * `metrics` variable and the getCharacterMetrics function.
 */

/**
 * This file contains the “gullet” where macros are expanded
 * until only non-macro tokens remain.
 */

/**
 * This file deals with creating delimiters of various sizes. The TeXbook
 * discusses these routines on page 441-442, in the "Another subroutine sets box
 * x to a specified variable delimiter" paragraph.
 *
 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
 * normal font, but in either text, script, or scriptscript style.
 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
 * smaller pieces that are stacked on top of one another.
 *
 * The functions take a parameter `center`, which determines if the delimiter
 * should be centered around the axis.
 *
 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
 * one of the given sizes. This is used for things like `\bigl`.
 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
 * delimiter which surrounds an expression of a given height an depth. It is
 * used in `\left` and `\right`.
 */

/**
 * This file does conversion between units.  In particular, it provides
 * calculateSize to convert other units into ems.
 */

/**
 * This file does the main work of building a domTree structure from a parse
 * tree. The entry point is the `buildHTML` function, which takes a parse tree.
 * Then, the buildExpression, buildGroup, and various groupBuilders functions
 * are called, to produce a final HTML tree.
 */

/**
 * This file holds a list of all no-argument functions and single-character
 * symbols (like 'a' or ';').
 *
 * For each of the symbols, there are three properties they can have:
 * - font (required): the font to be used for this symbol. Either "main" (the
     normal font), or "ams" (the ams fonts).
 * - group (required): the ParseNode group type the symbol should have (i.e.
     "textord", "mathord", etc).
     See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
 * - replace: the character that this symbol or function should be
 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
 *   character in the main font).
 *
 * The outermost map in the table indicates what mode the symbols should be
 * accepted in (e.g. "math" or "text").
 */

/**
 * This file provides support for Unicode range U+1D400 to U+1D7FF,
 * Mathematical Alphanumeric Symbols.
 *
 * Function wideCharacterFont takes a wide character as input and returns
 * the font information necessary to render it properly.
 */

/**
 * This file provides support to domTree.js and delimiter.js.
 * It's a storehouse of path geometry for SVG images.
 */

/**
 * This function adds new font metrics to default metricMap
 * It can also override existing metrics
 */

/**
 * This function is a convenience function for looking up information in the
 * metricMap table. It takes a character as a string, and a font.
 *
 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
 * built using `Make extended_metrics`.
 */

/**
 * This node represents a general purpose MathML node of any type. The
 * constructor requires the type of node to create (for example, `"mo"` or
 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
 */

/**
 * This node represents a piece of text.
 */

/**
 * Use this to register only the HTML and MathML builders for a function (e.g.
 * if the function's ParseNode is generated in Parser.js rather than via a
 * stand-alone handler provided to `defineFunction`).
 */

/** Convert the fragment into HTML markup. */

/** Convert the fragment into a node. */

/** Include this to ensure that all functions are defined. */

/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

/************************************************************************/

/******/

/***/

/*jslint node: true */

//

//                               A}%

//                               \fontsize\sf@size\z@

//                               \math@fontsfalse\selectfont

//                         \vss}%

//                 \hskip #1\hskip \z@skip}

//               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%

//          \vbox to\ht\z@{\hbox{\check@mathfonts

//         \TeX}

//         \kern-.15em%

//         {\sbox\z@ T%

//         }%

//        3 pt / ptPerEm

//      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}

//      note          long note           long note

//     '$a$ \expandafter\show\the\textfont2' \

//     '\documentclass{article}\usepackage{amsmath}\begin{document}' \

//     '\expandafter\show\the\scriptfont2' \

//     '\expandafter\show\the\scriptscriptfont2' \

//     '\stop'

//     latex -interaction=nonstopmode \

//     tftopl cmsy10

//     tftopl cmsy5

//     tftopl cmsy7

//     | \let<control sequence><equals><one optional space><token>

//    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

//    delimiterFactor / 655360

//    equation           eqn                 eqn

//    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}

//   Math.floor(655360 * maxDistFromAxis / 500) *

//   \char"123 -- hex

//   \char'123 -- octal

//   \char123  -- decimal

//   \char`\x  -- character that cannot be written (e.g. %)

//   \char`x   -- character that can be written (i.e. isn't active)

//   \else\mkern12mu\fi{\operator@font mod}\,\,#1}

//   \if@display\mkern18mu\else\mkern8mu\fi(#1)}

//   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

//   \mkern5mu\nonscript\mskip-\medmuskip}

//   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}

//   `const right = parser.parseFunction();`

//   parseGroup() returns an "ordgroup" wrapping some symbol node.

//   path(s), minWidth, height, align

//   path, width, height

//   {\operator@font mod}\penalty900

//   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓

//  \degree from gensymb package

// !mathFunction

// "Full" accents expand the width of the resulting symbol to be

// "aligned" mode.

// "boldsymbol" is missing because they require the use of multiple fonts:

// "k" is the only double struck lower case letter in the KaTeX fonts.

// "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in

// "middle"'s htmlBuilder.

// "operatorname", but also  "supsub" since \operatorname* can

// "undefined" behaviour, and keep them as-is. Some browser will

// ## → #

// $FlowFixMe

// $FlowFixMe Flow doesn't seem to understand span.style's type.

// $FlowFixMe More hackery

// $FlowFixMe, "environment" handler returns an environment ParseNode

// $FlowFixMe: Check if the node has a string `text` property.

// $FlowFixMe: Not every node type has a `text` property.

// $FlowFixMe: Only works for ChildType = MathDomNode.

// $FlowFixMe: Replace this with passing "svg-align" into makeVList.

// $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array

// ';' and '.', but doesn't check for ','.

// '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the

// 'ī': '\u0131\u0304', // enable when we add Extended Latin

// (LaTeX creates a new group for every $...$, $$...$$, \[...\].)

// (To see the difference, compare

// (by rendering separately and with {}s before and after, and measuring

// (in text mode), and it's unlikely we'd see any of the math commands

// (or null/undefined, meaning no further processing).

// (see The TeXBook, p. 43)

// (the height of the enclosing htmlNode) for proper vertical alignment.

// (until we support \ifmmode ... \else ... \fi).

// *assuming* a font size of ptPerEm (normal size, normal style).

// *text* font, e.g. cmr10. KaTeX instead uses values from the

// - The argument is a bare symbol node.

// - The argument is wrapped in {} or [], in which case Parser's

// -:

// 0-9 bold

// 0-9 bold sans

// 0-9 bold sans-serif

// 0-9 double-struck. No KaTeX font.

// 0-9 monospace

// 0-9 sans serif

// 0-9 sans-serif

// 0.005em above the lower end of the top element.

// 0.111 em = 2 mu

// 0xD835 is the high surrogate for all letters in the range we support.

// 0xDC00 is the low surrogate for bold A.

// 1000 unit normal glyph height.

// 445-446, rules 18(a-f).

// 65536 per pt, or 655360 per em. So, the division here truncates in

// 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are

// ::

// ::=

// :=

// < and > turn into \langle and \rangle in delimiters

// <assignment> -> <non-macro assignment>|<macro assignment>

// <def> -> \def|\gdef|\edef|\xdef

// <definition text> -> <parameter text><left brace><balanced text><right brace>

// <definition> -> <def><control sequence><definition text>

// <equals> -> <optional spaces>|<optional spaces>=

// <let assignment> -> \futurelet<control sequence><token><token>

// <macro assignment> -> <definition>|<prefix><macro assignment>

// <menclose> doesn't have a good notation option. So use <mpadded>

// <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>

// <prefix> -> \global|\long|\outer

// <simple assignment> -> <let assignment>

// =:

// === expanded

// A Cyrillic subset used to be supported as explicitly defined

// A Firefox \middle will strech a character vertically only if it

// A cases environment (in amsmath.sty) is almost equivalent to

// A font family applies to a group of fonts (i.e. SansSerif), while a font

// A gathered environment is like an array environment with one centered

// A group formed by \begingroup...\endgroup is a semi-simple group

// A lookup table to determine whether a spacing function/symbol should be

// A map of CSS-based spacing functions to their CSS class.

// A small array. Wrap in scriptstyle so row gap is not too large.

// A-Z Fraktur

// A-Z a-z Fractur

// A-Z a-z bold

// A-Z a-z bold italic

// A-Z a-z italic

// A-Z a-z monospace

// A-Z a-z sans bold

// A-Z a-z sans italic

// A-Z a-z sans-serif

// A-Z bold Fraktur No font metrics

// A-Z bold italic

// A-Z bold italic sans. No font

// A-Z bold sans-serif

// A-Z bold script. No font

// A-Z bold upright

// A-Z double struck

// A-Z double-struck

// A-Z italic

// A-Z italic sans-serif

// A-Z monospace

// A-Z sans-serif

// A-Z script

// AMS Arrows

// AMS Binary Operators

// AMS Binary Relations

// AMS Delimiters

// AMS Greek

// AMS Hebrew

// AMS Misc

// AMS Negated Arrows

// AMS Negated Binary Relations

// AMSMath's automatic \dots, based on \mdots@@ macro.

// Absolute units

// Accents

// Accents are handled in the TeXbook pg. 443, rule 12.

// Accents should always be ords, even when their innards are not.

// Account for that by shifting the subscript back the appropriate

// Add \hline(s), if any.

// Add horizontal padding

// Add it to the beginning of the expression

// Add it to the end of the expression.

// Add size-resetting classes to the inner list and set maxFontSize

// Add strut, which ensures that the top of the HTML element falls at

// Add that many symbols

// Add the attributes

// Add the bottom symbol

// Add the class

// Add the markup of the children, also as markup

// Add the styles, after hyphenation

// Add the top symbol

// Add vertical padding

// Additional macros, implemented by analogy with mathtools definitions:

// Address \hline and \hdashline

// Adjust the clearance based on the delimiter size

// Adjust the strut of the tag to be the maximum height of all children

// Adjusting alignment.

// All environment definitions should be imported below

// All nonmathematical Unicode characters are rendered as if they

// All of these are textords in math mode

// All of these are textords in text mode

// All of these are textords in text mode, and mathords in math mode

// Allow return value of strict function to be boolean or string

// Also consume leading spaces in math mode, as parseSymbol

// Also keep track of what font the delimiters are in

// Alternate names for mathtools's macros:

// An aligned environment is like the align* environment

// Any adjustments relative to the baseline must be done in buildHTML.

// Append an <mo>&ApplyFunction;</mo>.

// Append the children, also as HTML nodes

// Apply attributes

// Apply inline styles

// Apply the class

// Apply the correct CSS class to choose the right font.

// Apply the options that were active when \middle was called

// Arrays are part of LaTeX, defined in lttab.dtx so its documentation

// Arrays terminate newlines with `\crcr` which consumes a `\cr` if

// Arrow Symbols

// Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX

// Assumes that there is a "$" at state.src[pos]

// At this point, we should have a symbol, possibly with accents.

// At this point, we've reset the TeX-like height and depth values.

// Base must be set if superscript or subscript are set per logic above,

// Basic support for macro definitions: \def, \gdef, \edef, \xdef

// Because we've tested for what is !optional, this block won't

// Before version 0.9, \vec used the combining font glyph U+20D7.

// Bengali (0980–09FF)

// Binary Operators

// Blackboard bold and script letters in Unicode range

// Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

// Box manipulation

// Build a TeX annotation of the source

// Build a relation or stacked op by placing one symbol on top of another

// Build the accent

// Build the argument groups in the appropriate style.

// Build the base group

// Build the environment object. Arguments and other information will

// Build the expression contained in the tree

// Build the final group as a vlist of the possible subscript, base,

// Build the inner expression

// Build the inner group in the cramped style.

// Build the inner group.

// Build the lower group

// But browsers, especially Safari, are not consistent in how they

// But catch any exceptions thrown by function, treating them

// But since we support them in text mode, we need to return

// But the span still has an HTML line height.

// CJK ideograms

// CJK symbols and punctuation, Hiragana, Katakana

// CONCATENATED MODULE: ./src/MacroExpander.js

// CONCATENATED MODULE: ./src/SourceLocation.js

// CONCATENATED MODULE: ./src/buildHTML.js

// CONCATENATED MODULE: ./src/buildTree.js

// CONCATENATED MODULE: ./src/defineEnvironment.js

// CONCATENATED MODULE: ./src/delimiter.js

// CONCATENATED MODULE: ./src/environments.js

// CONCATENATED MODULE: ./src/environments/array.js

// CONCATENATED MODULE: ./src/fontMetrics.js

// CONCATENATED MODULE: ./src/functions.js

// CONCATENATED MODULE: ./src/functions/accent.js

// CONCATENATED MODULE: ./src/functions/accentunder.js

// CONCATENATED MODULE: ./src/functions/arrow.js

// CONCATENATED MODULE: ./src/functions/char.js

// CONCATENATED MODULE: ./src/functions/color.js

// CONCATENATED MODULE: ./src/functions/cr.js

// CONCATENATED MODULE: ./src/functions/def.js

// CONCATENATED MODULE: ./src/functions/enclose.js

// CONCATENATED MODULE: ./src/functions/environment.js

// CONCATENATED MODULE: ./src/functions/font.js

// CONCATENATED MODULE: ./src/functions/genfrac.js

// CONCATENATED MODULE: ./src/functions/horizBrace.js

// CONCATENATED MODULE: ./src/functions/href.js

// CONCATENATED MODULE: ./src/functions/html.js

// CONCATENATED MODULE: ./src/functions/htmlmathml.js

// CONCATENATED MODULE: ./src/functions/includegraphics.js

// CONCATENATED MODULE: ./src/functions/kern.js

// CONCATENATED MODULE: ./src/functions/lap.js

// CONCATENATED MODULE: ./src/functions/math.js

// CONCATENATED MODULE: ./src/functions/mathchoice.js

// CONCATENATED MODULE: ./src/functions/mclass.js

// CONCATENATED MODULE: ./src/functions/op.js

// CONCATENATED MODULE: ./src/functions/operatorname.js

// CONCATENATED MODULE: ./src/functions/ordgroup.js

// CONCATENATED MODULE: ./src/functions/overline.js

// CONCATENATED MODULE: ./src/functions/phantom.js

// CONCATENATED MODULE: ./src/functions/raisebox.js

// CONCATENATED MODULE: ./src/functions/rule.js

// CONCATENATED MODULE: ./src/functions/sizing.js

// CONCATENATED MODULE: ./src/functions/smash.js

// CONCATENATED MODULE: ./src/functions/sqrt.js

// CONCATENATED MODULE: ./src/functions/styling.js

// CONCATENATED MODULE: ./src/functions/symbolsOp.js

// CONCATENATED MODULE: ./src/functions/symbolsOrd.js

// CONCATENATED MODULE: ./src/functions/symbolsSpacing.js

// CONCATENATED MODULE: ./src/functions/tag.js

// CONCATENATED MODULE: ./src/functions/text.js

// CONCATENATED MODULE: ./src/functions/underline.js

// CONCATENATED MODULE: ./src/functions/utils/assembleSupSub.js

// CONCATENATED MODULE: ./src/functions/verb.js

// CONCATENATED MODULE: ./src/mathMLTree.js

// CONCATENATED MODULE: ./src/parseNode.js

// CONCATENATED MODULE: ./src/parseTree.js

// CONCATENATED MODULE: ./src/svgGeometry.js

// CONCATENATED MODULE: ./src/symbols.js

// CONCATENATED MODULE: ./src/units.js

// CONCATENATED MODULE: ./src/utils.js

// CONCATENATED MODULE: ./src/wide-character.js

// CONCATENATED MODULE: ./submodules/katex-fonts/fontMetricsData.js

// CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`

// CSS-based MathML spaces (\nobreak, \allowbreak) are ignored

// Calcuate the minimal height that the delimiter can have.

// Calculate its height and depth

// Calculate the actual line width.

// Calculate the clearance between the body and line

// Calculate the depth

// Calculate the minimum size for the \surd delimiter

// Calculate the shift, width, and height of the rule, and account for units

// Call the groupBuilders function

// Case 1

// Case 2

// Catch \hline outside array environment

// Characters omitted from Unicode range 1D400–1D7FF

// Check for extra closing math delimiters

// Check if module is in cache

// Check if the delimiter at this size works for the given height.

// Check if we have empty content, ie: $$.  Do not parse.

// Check non-whitespace conditions for opening and closing, and

// Check that we got a matching closing brace

// Check the next token

// Checks if the argument is a font family or a font style.

// Chinese and Japanese.

// Choose a taller image when there are more characters.

// Compute height and depth of this chunk.

// Compute the number of copies of the repeat symbol we will need

// Concatenate <mn>...</mn> followed by <mi>.</mi>

// Concatenate adjacent <mn>s

// Concatenate adjacent <mtext>s

// Concatenate expansion onto top of stack.

// Consolidate function names into symbol characters.

// Consume spaces if requested, crucially *after* we switch modes,

// Continue while either there are more columns or more column

// Convert from document ems to viewBox.

// Copyright (C) and registered (R) symbols. Use raw symbol in MathML.

// Count argument specifiers, and check they are in the order #1 #2 ...

// Count leftright depth (for \middle errors)

// Create a group namespace for the math expression.

// Create a new list of actual children at the correct offsets

// Create a new macro expander (gullet) and (indirectly via that) also a

// Create a new module (and put it into the cache)

// Create a span with inline SVG for the element.

// Create a strut that is taller than any list item. The strut is added to

// Create the line above the body

// Create the line to go below the body

// Create the stretchy element

// Currently, the group and options passed here do not contain

// Custom Khan Academy colors, should be moved to an optional package

// Cyrillic

// Decide what font to render the symbol in by its entry in the symbols

// Decide what sequence to use

// Decides on a style for cells in an array according to whether the given

// Deconstruct ligatures in monospace fonts (\texttt, \tt).

// Default \arraystretch from lttab.dtx

// Default \jot from ltmath.dtx

// Default options

// Define \Bbbk with a macro that works in both HTML and MathML.

// Define a newOptions that removes the effect of size changes such as \Huge.

// Delimiter functions

// Delims built here should not stretch vertically.

// Depending on the sequence element we decided on, call the

// Devanagari (0900–097F)

// Direct use of these functions is discouraged and may break someday.

// Do nothing yet.

// Does the accent need to shift for the skew of a character?

// Doesn't matter what this is.

// Don't allow break if \nobreak among the post-operator glue.

// Dummy spans for determining spacings between surrounding atoms.

// EOF

// EOF, ^, _, {, }, etc.

// EXTERNAL MODULE: ./src/katex.less

// Each element contains [textsize, scriptsize, scriptscriptsize].

// Each element in the array tells if the line is dashed.

// Each type in the `if` statement corresponds to one of the ParseNode

// Empty delimiters in \left and \right make null delimiter spaces.

// Enable \above{}

// End array group defining \\

// End cell group

// End group namespace

// End offset, zero-based exclusive.

// End the group namespace for the expression

// Environment delimiters. HTML/MathML rendering is defined in the corresponding

// Error position based on passed-in Token or ParseNode.

// Even number of escapes, potential closing delimiter found

// Execute the module function

// Explicitly disable fencing if it's not a fence, to override the

// Extract some context from the input and add it to the error

// Figure out what size to use based on the list of functions above

// Figure out what style this fraction should be in based on the

// Figure out what style to use by pulling out the style from

// Figure out what style we're changing to.

// Final arg is the expansion of the macro

// Finally, build the vlist

// Finally, we defer to `makeCustomSizedDelim` with our calculated total

// Finally, we pull the skew off of the symbol.

// Find column alignment, column spacing, and  vertical lines.

// Find out if we want displaystyle, textstyle, etc.

// Find the shift needed to align the upper end of the extra element at a point

// First check for and bypass all properly escaped delimieters

// First expand any accented base symbol according to unicodeSymbols.

// First, we do the same steps as in overline to build the inner group

// Flag the module as loaded

// Flow is unable to correctly infer the type of `group`, even though it's

// Flow unable to figure out that this pathway is impossible.

// Font Shapes

// Font families

// Font size is the number large enough that the browser will

// Font weights

// For MathML purposes, use the Unicode code point.

// For MathML we write U+0338 here. buildMathML.js will then do the overlay.

// For an operator with limits, assemble the base, sup, and sub into a span.

// For each one, add another prime to the list

// For error reporting.

// For now we use the metrics for TEXT style which is what we were

// For spacing, TeX treats \hphantom as a math group (same spacing as ord).

// For spacing, TeX treats \smash as a math group (same spacing as ord).

// Found potential $, look for escapes, pos will point to

// Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).

// Fraktur

// From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.

// Get \strut dimensions from TeXbook page 353.

// Get an SVG that is derived from glyph U+221A in font KaTeX-Main.

// Get current arraystretch if it's not set by the environment

// Get display style as a default.

// Get first token

// Get the delimiter from font glyphs.

// Get the input

// Get the metrics of the four sections

// Global set is equivalent to setting in all groups.  Simulate this

// Greek letters. Not supported, yet.

// Grouping

// Guaranteed in math mode, so eat any spaces first.

// Gujarati (0A80–0AFF)

// Gurmukhi (0A00–0A7F)

// Handle \text... font specifiers as best we can.

// Handle middle delimiters

// Handle sizing operators like \Huge. Real TeX doesn't actually allow

// Handle the optional root index

// Harpoons are from glyph U+21BD in font KaTeX Main

// Have a special case for when the value = \ because the \ is used as a

// Helper function

// Here is where we defer to the inner group if it should handle

// Here, we choose the index we should start at in the sequences. In smaller

// Here, we replace the "base" child of the supsub with our newly

// Horizontal overlap functions

// Horizontal spacing commands

// Horizontal stretchy braces

// However, in KaTeX, \textellipsis and \ldots behave the same

// HtmlDomNode

// IE doesn't support codePointAt(). So work with the surrogate pair.

// If Safari reforms, we should consider reverting to the glyph.

// If `expression` has no atoms on the left or right, class "leftmost"

// If `expression` is a partial group, let the parent handle spacings

// If content of op is a single symbol, shift it vertically.

// If incoming style is sub/sup, use style.text() to get correct size.

// If it is `*`, then it consumes the symbol, and the macro expands to #1;

// If it wasn't ^, _, or ', stop parsing super/subscripts

// If our base is a character box, and we have superscripts and

// If the base is a character box, then we want the skew of the

// If the input used \tag, it will set the \df@tag macro to the tag.

// If the size changed between the parent and the current group, account

// If there exists a function with this name, parse the function.

// If there is more than one separator in a row, add a space

// If there's a superscript following the primes, combine that

// If this is a list, compose that list.

// If this is a symbol, create the symbol.

// If we end up here, it's because of a failure to match the two delimiters

// If we get a brace, parse an expression

// If we have limits, supsub will pass us its group to handle. Pull

// If we have the input and a position, make the error a bit fancier

// If we reached the end of the sequence, return the last sequence element.

// If we succeeded, make sure there's an EOF at the end

// Ignore explicit spaces (e.g., \;, \,) when determining what implicit

// Ignore spaces in math mode

// In AMS multiline environments such as aligned and gathered, rows

// In KaTeX, for now, both spaces will get consumed.

// In LaTeX, the \foo's get treated as (blank) arguments.

// In TeX, there are actually three sets of dimensions, one for each of

// In aligned mode, we add one \qquad between columns;

// In all paths below, the viewBox-to-em scale is 1000:1.

// In mhchem.sty, min-length is 2.0em. But these arrows might appear in the

// In real TeX, calculations are done using integral values which are

// In text mode, we don't have superscripts or subscripts

// In this case, we separately parse the tag and wrap the tree.

// Infix generalized fractions -- these are not rendered directly, but replaced

// Insert glue (spacing) after the `prev`.

// Insert one extra repeat element.

// Is expression a string or has it something like a fraction?

// Is the inner group a relevant horizonal brace?

// It is at least the size of the top, bottom, and optional middle combined.

// It should render with the height that we define. But Chrome, in

// It's thus treated like a \mathrel, but defined by a symbol that has zero

// Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,

// KaTeX doesn't have \par, so ignore \long

// KaTeX fonts have only capital letters for blackboard bold and script.

// KaTeX shows a kern of 1.171 * fontsize.

// KaTeX's styles don't work properly in quirks mode. Print out an error, and

// Kannada (0C80–0CFF)

// Keep adding atoms to the body until we can't parse any more atoms (either

// Keep lexing tokens until we get something that's not a prime

// Korean

// LaTeX \arraystretch multiplies the row baseline-to-baseline distance.

// LaTeX applies \binrel spacing to \overset and \underset.

// LaTeX source2e

// LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2

// LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)

// LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.

// LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1

// LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

// LaTeX_2ε

// Lao (0E80–0EFF)

// Large Delimiters

// Latin Extended-A and Latin Extended-B

// Latin characters beyond the Latin-1 characters we have metrics for.

// Latin-1

// Lex the first token

// Lexer holding the input string.

// Lexer's tokenRegex is constructed to always have matching

// Limits, not symbols

// Limits, symbols

// List of commands that act like macros but aren't defined as a macro,

// Load entry module and return exports

// Look through the sequence

// Lookup table for parsing numbers in base 8 through 16

// MacroExpander.js

// Make an empty span for the rule

// Make an empty span for the space

// Make new global namespace

// Makes a symbol in the default font for mathords and textords.

// Malayalam (0D00–0D7F)

// Many primes can be grouped together, so we handle this here

// Map fancy A-Z letters to script, not calligraphic.

// Mark text from non-Latin scripts with specific classes so that we

// Math and Text

// Math class commands except \mathop

// Math-BoldItalic and Main-Bold.  This is handled by a special case in

// MathML alternates for KaTeX glyphs in the Unicode private area

// MathML gives 5/18em spacing to each <mo> element.

// MathML has a limited list of allowable mathvariant specifiers; see

// MathML makes no distinction between script and caligrahpic

// MathML table lines go only between cells.

// MathML, but polyfills for subclassing is expensive per PR 1469.

// Mathematical Alphanumeric Symbols.

// Misc Symbols

// Misc Unicode

// Modify ordgroup node within styling node

// Most operators have a large successor symbol, but these don't.

// Most symbol operators get larger in displaystyle (rule 13)

// Myanmar (1000–109F)

// NOTE: Currently, `cell` is the last item added into `row`.

// NOTE: The span class is not typed to have <math> nodes as children, and

// NOTE: Unlike most `htmlBuilder`s, this one handles not only

// NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but

// NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but

// Needed for Czech, Hungarian and Turkish text, for example.

// Negated symbols from base/fontmath.ltx:

// Never used; needed for satisfying interface.

// New KaTeX logo based on tweaking LaTeX logo

// Next, prevent vertical misplacement when next to something tall.

// Next, some wide character numerals

// No alt given. Use the file name. Strip away the path.

// No closing delimter found.  Consume $ and continue.

// No font glyphs yet, so use a glyph w/o the oval.

// No limits, not symbols

// No limits, symbols

// Non-mathy text, possibly in a font

// Not a perfect match.

// Note that base may be empty (i.e. null) at this point.

// Note that we are returning span.depth = 0.

// Note that we assume \nomallineskiplimit to be zero,

// Note: 1000:1 ratio of viewBox to document em width.

// Note: calling defineFunction with a type that's already been defined only

// Note: unicode-math maps \u21e2 to their own function \rightdasharrow.

// Now comes the symbol table

// Now insert the middle of the brace.

// Now, if there was a tag, build it too and append it as a final child.

// Numerals, ten per row.

// Object.prototype.hasOwnProperty.call

// Old font changing functions

// One for numbered and for unnumbered;

// Only some of the delimsizing functions act as fences, and they

// Operator ParseNodes created in Parser.js from symbol Groups in src/symbols.js.

// Operators are handled in the TeXbook pg. 443-444, rule 13(a).

// Optional [tb] argument is engaged.

// Oriya (0B00–0B7F)

// Other relative units always refer to the *textstyle* font

// Otherwise, just return a nucleus

// Otherwise, this is a text operator. Build the text from the

// Overlay the image and the argument.

// Overlay with combining character long solidus

// Overlines are handled in the TeXbook pg 443, Rule 9.

// Override CSS rule `.katex svg { width: 100% }`

// Parentheses need a short repeat element in order to avoid an overrun.

// Parse a number in the given base, starting with first `token`.

// Parse body of array with \\ temporarily mapped to \cr

// Parse each cell in its own group (namespace)

// Parse expressions into `groups`.

// Parse out the implicit body

// Parse out the implicit body that should be colored.

// ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in

// Parser.js

// Parser.js does not parse key/value pairs. We get a string.

// Parser.js throws an error if there is no argument.

// Parsing of {subarray} is similar to {array}

// Per amsopn package,

// Pick the desired surd glyph from a sequence of surds.

// Predefined color names are all missed by this RegEx pattern.

// Prepend some information

// Present in newtxmath, pxfonts and txfonts

// Property `isMiddle` not defined on `span`. It is only used in

// Property `isMiddle` not defined on `span`. See comment in

// Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

// Punctuation

// Put any post-operator glue on same line as operator.

// Put everything into an ordgroup as the superscript

// Put the color background behind inner;

// Put the newline at the top level

// Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.

// Record the height and width

// Recursive DFS

// Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em

// Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

// Ref: LaTeX source2e: }}}}\limits}

// Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%

// Relation Symbols

// Remove the italic correction of the accent, because it only serves to

// Render a small surd.

// Replace the value with its replaced value from symbol.js

// Rerender the supsub group with its new base, and store that

// Return an array. The array length = number of hlines.

// Return an image span for \cancel, \bcancel, \xcancel, or \fbox

// Return nothing for an optional group

// Return the exports of the module

// Row breaks within tabular environments, and line breaks at top level

// Rule 15c

// Rule 15d

// Rule 18b

// Rule 18c

// Rule 18c, d

// Rule 18e

// Safari wants the first row to have inline content; otherwise it

// Same for the right delimiter, but using color specified by \color

// See "color" for more details.

// See TeXbook p170.

// See delimsizing.js for stretchy delims.

// See exception for k below.

// See http://stackoverflow.com/a/8460753

// See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html

// See smash for comment re: use of makeVList

// See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to

// See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

// Separate accents from characters

// Set a position for \hline(s) at the top of the array, if any.

// Set a position for \hline(s), if any.

// Set column alignment, row spacing, column spacing, and

// Set column spacing.

// Set default values of environments.

// Set default values of functions

// Set macro \current@color in current namespace to store the current

// Set spacing based on what is the most likely adjacent atom type.

// Set the row spacing. In MathML, we specify a gap distance.

// Shift the accent over by the skew.

// Shift the limits by the slant of the symbol. Note

// Shift the sqrt image

// Should look like "\name" or "\begin{name}".

// Simply concatenate the markup for the children together.

// Since \cancel's SVG is inline and it omits the viewBox attribute,

// Since no types are specified above, the two possibilities are

// Since the corresponding buildHTML/buildMathML function expects a

// Since this will be passed into `makeVList` in the end, wrap the element

// Since we don't rerun the height calculation after replacing the

// Since we manually change the style sometimes (with \dfrac or \tfrac),

// Since we use the same font at all sizes, this thickness doesn't scale.

// Single line expression

// Sinhala (0D80–0DFF)

// Sized delimiters are never centered.

// Small delimiters are scaled down versions of the same font, so we

// So if the character is in a script we support but we

// So now we use an SVG.

// So we can calculate the relevant row. No traverse necessary.

// So we need to avoid U+2223 and use plain "|" instead.

// So we put another empty span inside the depth strut span.

// Some Unicode characters are implemented with macros to mathtools functions.

// Some abbreviations for commonly used strings.

// Some editors do not deal well with wide characters. So don't write the

// Some groups can return document fragments.  Handle those by wrapping

// Some hackery to make ParseError a prototype of Error

// Some of these have a "-token" suffix since these are also used as `ParseNode`

// Spaces are generated by adding an actual space. Each of these

// Spaces based on just a CSS class.

// Spacing, based on amsmath.sty's override of LaTeX defaults

// Square roots are handled in the TeXbook pg. 443, Rule 11.

// Start a new group namespace

// Start group for first cell

// Start in math mode

// Start offset, zero-based inclusive.

// Stick the character box into the base of the supsub group

// Store the settings for use in parsing

// Stretchy arrows with an optional argument

// Strip off any combining characters

// Strip off outer tag wrapper for processing below.

// Style changes are handled in the TeXbook on pg. 442, Rule 3.

// Style the rule to the right size

// Subscripts shouldn't be shifted by the base's italic correction.

// Super scripts and subscripts, whose precise placement can depend on other

// Superscript and subscripts are handled in the TeXbook on page

// Switch mode back

// Switch to specified mode

// Switching from text mode back to math mode

// Symbol names preceeded by "@" each have a corresponding macro.

// Symbols from latex.ltx:

// Symbols whose definition starts with \DOTSB:

// Symbols whose definition starts with \DOTSI:

// Symbols whose definition starts with \DOTSX:

// Symbols whose definition starts with \mathbin:

// Symbols whose definition starts with \mathrel:

// TODO(#963): Use a union type for this.

// TODO(alpert): More duplication than I'd like from

// TODO(edemaine)

// TODO(edemaine): Fix this.

// TODO(edemaine): allow overriding \jot via \setlength (#687)

// TODO(emily): Add a space in the middle of some of these

// TODO(emily): Figure out a good way to only print this in development

// TODO(emily): This doesn't produce the correct size for nested size

// TODO(kevinb) get the current style.

// TODO(kevinb): don't prefix with 'm'

// TODO(kevinb): implement \\sl and \\sc

// TODO: Create variable sized versions of the last two items. I believe that

// TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't

// TODO: Fix this violation of the `span` type and possibly rename

// TODO: If used in text mode, should expand to \textellipsis.

// TODO: In LaTeX, \pounds can generate a different character in text and math

// TODO: In TeX these units are relative to the quad of the current

// TODO: Left-aligned tags.

// TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

// TODO: Should properly expand arg, e.g., ignore {}s

// TODO: The value type of _environments should be a type union of all

// TODO: When font glyphs are available, delete this code.

// TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

// TODO: \hskip and \mskip should support plus and minus in lengths

// TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

// TODO: math mode should use \medmuskip

// TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

// TODO: math mode should use \thickmuskip

// TODO: math mode should use \thickmuskip = 5mu plus 5mu

// TODO: math mode should use \thinmuskip

// Taken from TeX source, tex.web, function make_left_right

// Tall sqrt. In TeX, this would be stacked using multiple glyphs.

// Tamil (0B80–0BFF)

// TeX \char makes a literal character (catcode 12) using the following forms:

// TeX \showlists shows a kern of 1.13889 * fontsize;

// TeX but doesn't here, producing different results. If we wanted to

// TeX first reads the token that comes immediately after \expandafter,

// TeX point

// TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

// TeX source: \long\def\@firstoftwo#1#2{#1}

// TeX source: \long\def\@secondoftwo#1#2{#2}

// Telugu (0C00–0C7F)

// Test for \hline at the top of the array.

// Test if potential opening or closing delimieter

// Text-mode accents

// Thai (0E00–0E7F)

// The "k" in cjk is for Korean, but we've separated Korean out

// The + prefix indicates that these fields aren't writeable

// The 0.16 and 0.09 values are found emprically. They produce an array

// The 1.125 factor was empirically determined

// The Brahmic scripts of South and Southeast Asia

// The Cyrillic script used by Russian and related languages.

// The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays

// The KaTeX fonts have corners at codepoints that don't match Unicode.

// The \sqrt rule width is taken from the height of the surd character.

// The body of an atom is an implicit group, so that things like

// The cancel package documentation says that cancel lines add their height

// The character box is the base of the accent group

// The detour begins at the lower left of the area labeled extraViniculum below.

// The detour proceeds one extraViniculum distance up and slightly to the right,

// The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main

// The error message

// The expansion is the token itself; but that token is interpreted

// The following builders are called only at the top level,

// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.

// The greediness of a superscript or subscript

// The hex numbers in the next line are a surrogate pair.

// The index is always in scriptscript style

// The matrix environments of amsmath builds on the array environment

// The metrics themselves were retreived using the following commands:

// The module cache

// The next 3 functions are here to support the mhchem extension.

// The next loop loads wide (surrogate pair) characters.

// The next ten paths support reaction arrows from the mhchem package.

// The next three arrows are from the mhchem package.

// The output of each of these commands is quite lengthy.  The only part we

// The point we want on the math axis is at 0.5 * arrowBody.height.

// The real accent group is the base of the supsub group

// The require function

// The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.

// The size mappings are taken from TeX with \normalsize=10pt.

// The size of delimiters is the same, regardless of what style we are

// The slant of the symbol is just its italic correction.

// The space between adjacent `|` columns in an array definition. From

// The steps taken here are similar to the html version.

// The stmaryrd and semantic packages render the next four items by calling a

// The stmaryrd function `\minuso` provides a "Plimsoll" symbol that

// The texvc package contains macros available in mediawiki pages.

// The version in ambsy.sty works by typesetting three copies of the argument

// The viniculum of a \sqrt can be made thicker by a KaTeX rendering option.

// The vlist contents go in a table-cell with `vertical-align:bottom`.

// The width of separator lines in {array} environments. From

// The zero-width rule gets us an equivalent to the vertical 6pt kern.

// Then browser rounding error on the parent span height will not

// Then, at the last element-to element joint, we add one extra repeat

// Then, we render its group to get the symbol inside it

// There are 2 flags for operators; whether they produce limits in

// There are four SVG images available for each function.

// There are four parts, the top, an optional middle, a repeated part, and a

// There are lots of symbols which are the same, so we add them in afterwards.

// These SVGs come from fonts: KaTeX_Size1, _Size2, etc.

// These all refer to characters from the font, so we turn them into special

// These are all they types of groups which hold single characters

// These font metrics are extracted from TeX by using tftopl on cmex10.tfm;

// These ligatures are detected and created in Parser.js's `formLigatures`.

// They can't all go in the same vlist, because the note might be

// Think of variable extraViniculum as two detours in the SVG path.

// This actually should depend on the chosen font -- e.g. \boldmath

// This aligns with unicode-math and math fonts (except Cambria Math).

// This behavior is not strict (XeTeX-compatible) in math mode.

// This case probably shouldn't occur (this would mean the

// This cell's bottom edge will determine the containing table's baseline

// This code aligns the top of the A with the T (from the perspective of TeX's

// This code resolves issue #1234

// This entry module is referenced by other modules so it can't be inlined

// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.

// This follows the xcolor package's HTML color model.

// This function differs from the TeX procedure in one way.

// This function might one day accept an additional argument and do more things.

// This helps minify the code, and also spotting typos using jshint.

// This is a nested size change: e.g., inner[i] is the "b" in

// This is a symbol. Just add the symbol.

// This is a text operator. Add all of the characters from the

// This is an operator with children. Add them.

// This is currently used just to correctly color a \right

// This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.

// This loop will assume that the first leading backtick can not

// This should never happen.

// This table gives the number of TeX pts in one of each *absolute* TeX unit.

// This value determines how large a pt is, for metrics which are defined

// This value is also used in katex.less; if you change it make sure the

// This was determined by running the following script:

// Thus, multiplying a length by this number converts the length from units

// Tibetan (0F00–0FFF)

// To accomplish this, we wrap the results in a fragment, so the inner

// To avoid this, we would subclass documentFragment separately for

// To cover the gap create by the overlaps, insert one more repeat element,

// To place a line on an edge we'll use <menclose>, if necessary.

// To write the supsub, wrap the first vlist in another vlist:

// Transform combining characters into accents

// Treat under accents much like underlines.

// Trim any trailing whitespace from control word match

// Try to parse an open brace or \begingroup

// Try to parse the input

// Two paths that cover gaps in built-up parentheses.

// Two values from LaTeX source2e:

// Underline token in question using combining underscores

// Underlines are handled in the TeXbook pg 443, Rule 10.

// Undo this set at end of this group (possibly to `undefined`),

// Unicode accent mechanism, so they fall back to Times font and look ugly.

// Unicode middle dot

// Unicode stacked relations

// Unscale to make absolute units

// Use delimiter.sizedDelim to generate the delimiter.

// Use old \color behavior (same as LaTeX's \textcolor) if requested.

// Use the last character's italic correction since we use

// Used to describe the mode in error messages.

// Vertical spacing

// Watch for \nobreak along the way, and stop at \newline.

// We add font name as a css class

// We add these Latin-1 letters as symbols for backwards-compatibility,

// We allow a 6-digit HTML color spec without a leading "#".

// We also omit texvc's \O, which conflicts with \text{\O}

// We always center \left/\right delimiters, so the axis is always shifted

// We always start at the bottom, so calculate the bottom by adding up

// We compute the corresponding \raisebox when A is rendered in \normalsize

// We create viewBoxes with 80 units of "padding" above each surd.

// We do not use rowGap[] because MathML automatically increases

// We do this within the group for the math expression, so it doesn't

// We don't pick different a height surd for \Huge. For it, we scale up.

// We don't support any wide characters outside 1D400–1D7FF.

// We don't typically have font metrics for Asian scripts.

// We got a limit control

// We got a prime

// We got a subscript start

// We got a superscript start

// We kept the amssymb atom type, which is rel.

// We manually have to handle the superscripts and subscripts. This,

// We need to shift the character by its width (effectively half

// We omit the functions deprecated at

// We set the parts and font based on the symbol. Note that we use

// We shift each repeat element downwards by 0.005em, to prevent a gap

// We simulate this by adding (arraystretch - 1)em to the gap. This

// We support some letters in the Unicode range U+1D400 to U+1D7FF,

// We suppress the shift of the base of \overset and \underset. Otherwise,

// We use CSS class names like cjk_fallback, hangul_fallback and

// We will define depth in an empty span with display: table-cell.

// We'll call \varvdots, which gets a glyph from symbols.js.

// We'll make a 0.3em tall element from a SVG.

// We'll map it to AMS function \dashrightarrow. It produces the same atom.

// We'll use a single SVG to accomplish the same thing.

// We're in \oiint or \oiiint. Overlay the oval.

// We're in a \tfrac but incoming style is displaystyle, so:

// When TeX writers want to suppress spacing on an operator,

// When there is a middle bit, we need the middle part and two repeated

// Wrap the supsub vlist in a span.msupsub to reset text-align.

// Wrap up the expression in an mrow so it is presented in the semantics

// Write a single TextNode instead of multiple nested tags.

// Write the \cancel stroke on top of inner.

// Write the line except the newline

// You can't style <math> nodes, so we wrap the node in a span.

// \@argarraycr

// \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.

// \@char is an internal function that takes a grouped decimal argument like

// \@yargarraycr

// \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}

// \DeclareRobustCommand

// \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}

// \DeclareRobustCommand{\LaTeX}{L\kern-.36em%

// \DeclareRobustCommand{\copyright}{%

// \DeclareRobustCommand{\tmspace}[3]{%

// \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}

// \DeclareTextCommandDefault{\textregistered}{\textcircled{%

// \\ defaults to \newline, but changes to \cr within array environment

// \\ is a macro mapping to either \cr or \newline.  Because they have the

// \above is an infix fraction that also defines a fraction bar size.

// \baselineskip via \openup.

// \bigcirc glyph

// \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.

// \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox

// \cancel, \bcancel, or \xcancel

// \cfrac inserts a \strut into the numerator.

// \char defined in macros.js.

// \colonapprox name is same in mathtools and colonequals.

// \colonsim name is same in mathtools and colonequals.

// \color isn't supposed to affect the type of the elements it contains.

// \def \AA {\r A}

// \def \aa {\r a}

// \def\>{\mskip\medmuskip}

// \def\@hspace#1{\hskip  #1\relax}

// \def\@hspacer#1{\vrule \@width\z@\nobreak

// \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}

// \def\arraystretch{1.2}%

// \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

// \def\enskip{\hskip.5em\relax}

// \def\enspace{\kern.5em }

// \def\iff{\DOTSB\;\Longleftrightarrow\;}

// \def\impliedby{\DOTSB\;\Longleftarrow\;}

// \def\implies{\DOTSB\;\Longrightarrow\;}

// \def\lq{`}

// \def\neq{\not=} \let\ne=\neq

// \def\qquad{\hskip2em\relax}

// \def\quad{\hskip1em\relax}

// \def\rq{'}

// \dotsc uses \extra@ but not \extrap@, instead specially checking for

// \extra@ also tests for the following:

// \extrap@ checks for the following:

// \genfrac acts differently than \above.

// \genfrac treats an empty size group as a signal to use a

// \hbox, which is like \text but switching to \textstyle size.

// \hskip -\arraycolsep in amsmath

// \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA

// \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}

// \keybin@ checks for the following:

// \left case below triggers parsing of \right in

// \left(x\right)^2 work correctly.

// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.

// \let\DOTSB\relax

// \let\DOTSI\relax

// \let\DOTSX\relax

// \let\bgroup={ \let\egroup=}

// \let\medspace\:

// \let\negthinspace\!

// \let\thickspace\;

// \let\thinspace\,

// \llap and \rlap render their contents in text mode

// \middle should get delimiter spacing instead.

// \mkern, \mskip

// \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

// \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

// \newcommand{\macro}[args]{definition}

// \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu

// \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}

// \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}

// \newcommand{\pod}[1]{\allowbreak

// \not is defined by base/fontmath.ltx via

// \operatorname

// \phantom isn't supposed to affect the elements it contains.

// \pmb    --   A simulation of bold.

// \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

// \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

// \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

// \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

// \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

// \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

// \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

// \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

// \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

// \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

// \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

// \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

// \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

// \relax stops the expansion, but shouldn't get returned (a

// \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}

// \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}

// \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}

// \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}

// \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin

// \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript

// \renewcommand{\macro}[args]{definition}

// \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}

// \rightdelim@ checks for the following:

// \scriptstyle, which has a scale factor of 0.7 (see Options.js).

// \tag@in@display form of \tag

// \textcircled uses the \bigcirc glyph, so it needs some

// \textdegree from inputenc package

// \u2061 is the same as &ApplyFunction;

// \vdots is a macro

// \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@

// \verb and \verb* are dealt with directly in Parser.js.

// __webpack_public_path__

// `ParseNode` types. These `ParseNode`s are constructed within `Parser` by

// `\Huge a \small b`. Override the old size (the `reset-` class)

// `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.

// `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.

// `mu` units scale with scriptstyle/scriptscriptstyle.

// `overflow:hidden`, the strut's top edge will sit on the item's line box's

// a group, we scale down the inner size based on the size.

// a-z Fraktur

// a-z bold Fraktur.   No font.

// a-z bold italic

// a-z bold italic sans. No font

// a-z bold sans-serif

// a-z bold script. No font

// a-z bold upright

// a-z italic

// a-z italic sans-serif

// a-z sans-serif

// a-z script.  No font

// accent, we manually recalculate height.

// account for the possible size change here.

// account for the style change size.

// active character

// acute

// add ī when we add Extended Latin

// affect \kern, \hspace, etc. It will capture the mandatory arguments

// affected by the height of the accent). We accomplish this by

// after which it resumes regular path geometry for the radical.

// aliases, except \bm defined below

// alignat environment is like an align environment, but one must explicitly

// all the sizes

// allow null options

// almost on the axis, so these numbers are very small. Note we

// amount. Note we only do this when the base is a single symbol.

// amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the

// amsmath doesn't actually define \dotsx, but \dots followed by a macro

// amsmath.sty

// amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@

// an existential type.

// and adding an undo with the *new* value (in case it later gets

// and contents are set in \displaystyle.

// and forces the added `\,`.

// and line

// and possible superscript.

// another natural choice (the user requested math mode), but

// appears that our fonts have the centers of the symbols already

// appropriate function.

// appropriately for use as the marginRight.

// are in text mode (wrapped in \text) because that's what it

// argument's bin|rel|ord status

// array lines by setting attributes on the table element.

// as defined in mathtools.sty.

// as defined in nccmath.sty.

// as if its meaning were ‘\relax’ if it is a control sequence that

// aside from the kern calculations, is copied from supsub.

// at a position that juts 0.005 above the bottom of the top element.

// at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2

// at least the width of the accent, and overlap directly onto the

// atom type directly.

// baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main

// be made available to the begin and end methods using properties.

// be positioned precisely without worrying about font ascent and

// be the first character in state.src, which is known since

// begin...end is similar to left...right

// between them.

// big (PostScript) points

// blackboard bold

// blackboard bold [

// blackboard bold ]

// blackboard bold {

// blackboard bold }

// bottom.

// boxes, though visually the A appears to extend above slightly).

// brace width.

// brahmic_fallback. See ./unicodeScripts.js for the set of possible

// braket.sty

// breve

// buildSvgSpan_()

// but need to check here for type check to pass.

// but not the new size.

// but since we are centering the limits adding a full slant of

// but they are equivalent to \mathit{\Letter}.

// but they are not actually in the font, nor are they supported by the

// but, KaTeX doesn't supports math numbering yet,

// by destroying any undos currently scheduled for this name,

// calculate the amount of space between the body and the accent

// calls to a function \@char dealt with in the Parser.

// can be used for bold + and -

// can specify which fonts to use.  This allows us to render these

// can’t be entered directly

// care about is the FONTDIMEN section. Each value is measured in EMs.

// caron

// category codes, only supports comment characters (14) for now

// cell height with the height/depth of the element content.

// centimeter

// change minus to hyphen and \ast to asterisk

// changes, because we don't keep state of what style we're currently

// character without any vertical offset.

// characters with a serif font in situations where the browser would

// check for \hline(s) following the row separator

// check that closing delimeter isn't followed by a number

// cicero (12 didot)

// circumflex

// cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.

// colonequals.sty

// color, mimicking the behavior of color.sty.

// column index for CSS class.

// column, but where rows are considered lines so get \jot line spacing

// comment character

// comparably-sized *Computer Modern symbol* font. At 10pt, these

// consume command token

// consume one optional space

// consume optional equals

// contenteditable mode only, treats that span as if it contains some

// correspond to lines that have additional \jot added to the

// create a fake namespace object

// default

// default unit is bp, per graphix package.

// default value, i.e. \arraycolsep in article.cls

// defaults.

// define __esModule on exports

// define getter function for harmony exports

// defineEnvironment definitions.

// descriptions, so trailing separators don't get lost.

// diaresis

// didot

// disable rendering.

// displacing the radiused corner between surd and viniculum. The radius is

// displaystyle, and whether they are symbols and should grow in

// displaystyle. These four groups cover the four possible choices.

// distinguish Unicode characters without metrics and those for

// ditto tilde2, tilde3, & tilde4

// ditto widehat2, widehat3, & widehat4

// document as \xrightarrow or \xrightleftharpoons. Those have

// does a reasonable job of adjusting arrays containing 1 em tall content.

// doesn't look funny in math mode.

// doing before.  Before attempting to get the current style we

// don't actually apply this here, but instead it is used either in

// don't expand it later even if a macro with the same name is defined

// don't expand the token

// don't have metrics for it, just use the metrics for

// dot above

// dotless i or j

// double acute

// doublerightarrow is from glyph U+21D2 in font KaTeX Main

// drop first #

// due to browser floating point rounding error.

// e.g., \let\foo=\frac \def\frac{\relax} \frac12

// each columns.

// each item, where it will determine the item's baseline. Since it has

// either default to a sans serif or render a placeholder character.

// element to cover the gap created by the shifts.

// elements will be able to directly interact with their neighbors. For

// encroach on the ink of the viniculum. But that padding is not

// enough info to set tag alignment. `leqno` is in Settings but it is

// ensure non-empty stack

// environment name starts with the letter 'd'.

// eslint-disable-line no-constant-condition

// eslint-disable-line no-unreachable

// eslint-disable-next-line no-console

// exactly match TeX's calculation, we could do

// example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

// except it operates within math mode.

// expand only an expandable token

// expand only expandable tokens

// expandOnce returns Token if and only if it's fully expanded.

// expose the module cache

// expose the modules object (__webpack_modules__)

// extracted by mini-css-extract-plugin

// falls at the depth of the expression.

// families

// first non escape when complete

// first nonspace character.  If that nonspace character matches #1, then

// first/last characters.

// fontMetrics.js:getGlobalMetrics also uses size indexes, so if

// fonts added by plugins

// for a table of space-like characters.  We use Unicode

// for that size difference.

// from acting on that line height. So we'll call makeVList now.

// from amsmath

// function used

// function, or symbol.  Used in `isDefined`.

// functions that precede them.

// generate valid links in such cases; we interpret this as

// generated accent.

// get raw string

// getDefaultExport function for compatibility with non-harmony modules

// glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

// grave

// handling.

// has an argument), replacing it by its expansion. Finally TeX puts

// have thicker rules.

// hbox argument type wraps the argument in the equivalent of

// height

// high surrogate

// hook is from glyph U+21A9 in font KaTeX Main

// http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf

// https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

// https://en.wikibooks.org/wiki/LaTeX/Lengths and

// https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax

// https://github.com/facebook/flow/issues/4808

// https://tex.stackexchange.com/a/41371

// https://tex.stackexchange.com/a/8263

// https://tex.stackexchange.com/questions/1930/when-should-one-

// https://www.w3.org/TR/MathML3/appendixc.html.

// https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt

// hyperref package allows backslashes alone in href, but doesn't

// i.e. LaTeX treats the brace similar to an op and passes it

// ignore spaces before each argument

// ignore spaces before sup/subscript argument

// immediately by one of the variants above.

// in MathML if browsers supported <mlabeledtr>. Since they don't, we

// in T1 fontenc

// in TeX and KaTeX)

// in terms of pts.

// in the appropriate tag that VList uses.

// in the current size.

// in the regex in Lexer.js.  LaTeX raises the following error when \verb is

// in the sequence. Thus, scriptscript starts at index 3-3=0, script starts

// in this table, then it should be a regular space character.  Furthermore,

// in, so we can't reset the size to normal before changing it.  Now

// in. Thus, to correctly calculate the size of delimiter we need around

// inch

// included in the TeX-like `height` used for calculation of

// indicating whether we're in the \cr case, and newLine indicating whether

// innermost character. To do that, we find the innermost character:

// insert at front

// instead. Set some attributes that come included with <menclose>.

// into appropriate outputs.

// into pts.  Dividing the result by ptPerEm gives the number of ems

// is in the fence part of the operator dictionary at:

// is part of the source2e.pdf file of LaTeX2e source documentation.

// isTight() means current style is script/scriptscript.

// it to add padding to the right of the span created from

// italic h, Planck constant

// its base.

// its stroke-width will not vary with span area.

// its width) to compensate.

// k double struck

// k double-struck

// last token of the range, inclusive

// leftarrow is from glyph U+2190 in font KaTeX Main

// like "error".

// like above, to fit in with stack order

// line-height.

// list of elements, we normalize for different kinds of arguments

// locally reset within this environment).

// looking up the `symbols` map.

// macro tools

// macron

// macros, e.g. \frac\foo\foo where \foo expands to a space symbol.

// mainly checking for undefined here

// make a shallow copy

// make the latter via document.createTextNode.

// makeOrd which ends up calling boldsymbol.

// makeVList applies "display: table-cell", which prevents the browser

// manually. Handle nested size changes.

// margin will shift by 1/2 that.

// match cmex7, we'd use cmex7.tfm values for script and scriptscript

// match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;

// mathllap, mathrlap, mathclap

// mathtools.sty

// medium space

// millimeter

// min-length = 1.75em, so we set min-length on these next three to match.

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// mode, but among our fonts, only Main-Regular defines this character "163".

// modes:

// need to rewrite the way this function is called.

// new cicero (12 new didot)

// new didot

// new lexer (mouth) for this parser (stomach, in the language of TeX)

// next token on stack

// no module.id needed

// no module.loaded needed

// no symbol for e.g. ^

// normalsize in scriptscriptstyle

// normalsize in scriptstyle

// normalsize in textstyle or displaystyle

// not its width.

// not passed to Options. On the HTML side, leqno is

// not within tabular/array environments.

// null return value couldn't get implemented as a function).

// obtain arguments, either single token or balanced {…} group

// of LaTeX, which is discussed above.

// of rendering problems that makeVList encounters in Safari.

// of span are expected to have more fields in `buildHtml` contexts.

// operator's name.

// operators, like \limsup

// or "rightmost", respectively, is used to indicate it.

// otherwise we add nothing.

// otherwise, the macro expands to #2 (without consuming the symbol).

// out the superscript and subscript and set the group to the op in

// oval to overlay the integrand

// overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular

// overgroup is from the MnSymbol package (public domain)

// overlap

// padding above a sqrt viniculum. Prevents image cropping.

// parse out the implicit body

// parseExpression stops before '\\right'

// paste arguments in place of the placeholders

// pica

// pollute settings.macros.

// possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is

// provided in the the arrays below, in that order.

// puts the bottom of the *second* row on the baseline.

// ref: amsmath: \renewcommand{\smash}[1][tb]{%

// ref: cancel package: \advance\totalheight2\p@ % "+2"

// ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/

// ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf

// ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

// ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

// remove first and last char

// remove last }

// render combining characters when not preceded by a character.

// rendering that, while keeping track of where the accent is.

// repeats of the arrows

// replace backslashes with forward slashes.

// replace the placeholder with the indicated argument

// representations instead of &LongNames; as it's not clear how to

// represents a specific font (i.e. SansSerif Bold).

// reproduce the same behavior in expansion

// reserve at least `absHeight` space above the baseline.

// reset original base

// result.

// return "mopen" or "mclose" mclass.

// rightarrowabovebar is mostly from glyph U+2192, KaTeX Main

// ring above

// same signature, we implement them as one megafunction, with newRow

// scaled point (TeX's internal smallest unit)

// script

// script names

// scriptspace is a font-size-independent size, so scale it

// sections

// see size10.clo

// set by a CSS class applied in buildTree.js. That would have worked

// shift the accent over to a place we don't want.

// shift the symbol so its center lies on the axis (rule 13). It

// should look at TeX's behavior especially for \over and matrices.

// should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and

// sigma1

// sigma10

// sigma11

// sigma12

// sigma13

// sigma14

// sigma15

// sigma16

// sigma17

// sigma18

// sigma19

// sigma2

// sigma20

// sigma21

// sigma22

// sigma3

// sigma4

// sigma5

// sigma6

// sigma7

// sigma8

// sigma9

// sign + magnitude, cast to number

// similar to LaTeX and in which content does not interfere with \hines.

// size1 is from glyph U221A in the font KaTeX_Size1-Regular

// size10: [20.74, 14.4, 12]     \huge

// size1: [5, 5, 5]              \tiny

// size2 is from glyph U221A in the font KaTeX_Size2-Regular

// size2: [6, 5, 5]

// size3 is from glyph U221A in the font KaTeX_Size3-Regular

// size3: [7, 5, 5]              \scriptsize

// size4 is from glyph U221A in the font KaTeX_Size4-Regular

// size4: [8, 6, 5]              \footnotesize

// size5: [9, 6, 5]              \small

// size6: [10, 7, 5]             \normalsize

// size7: [12, 8, 6]             \large

// size8: [14.4, 10, 7]          \Large

// size9: [17.28, 12, 10]        \LARGE

// sizes (which correspond to larger numbers in style.size) we start earlier

// smash, with optional [tb], as in AMS

// so that \strut@ is the same as \strut.

// so that the accent doesn't contribute to the bounding box.

// so that the next non-space token is parsed in the correct mode.

// some sort of metrics.

// spacing should go between atoms of different classes

// span.prototype.toMarkup and symbolNode.prototype.toNode...

// specify maximum number of columns in each row, and can adjust spacing between

// sqrtMain path geometry is from glyph U221A in the font KaTeX Main

// src/symbols.js.

// standard bar size. \above would see size = 0 and omit the bar.

// starting with \DOTSX implies \dotso, and then \extra@ detects this case

// startup

// statmath.sty

// sticking the base of the accent into the base of the supsub, and

// stmaryrd and semantic

// str is a number with no unit specified.

// string into this file. Instead, create the string from the surrogate pair.

// styles

// styles, except \boldsymbol defined below

// subscript) but be safe.

// subscripts, the supsub will defer to us. In particular, we want

// superimposes the characters \circ and \mathminus. Used in chemistry.

// superscript in with the primes.

// superscripts and subscripts itself.

// support \@ yet, so that's omitted, and we add \text so that the result

// supsub was sending us a group with no superscript or

// surrogate pairs get special treatment

// symbol that isn't a space, consuming any spaces but not consuming the

// symbol, if, else

// symbols in symbols.js

// t back in front of that expansion.

// table for text, as well as a special case for boldsymbol because it

// table.

// tag correctly, unless it's a single <mrow> or <mtable>.

// takes to render them in LaTeX.  Setting `mode: this.mode` is

// temporarily append the right node, if exists

// terminal (console) tools

// terminated by end of line (or file).

// text content. And that min-height over-rides our desired height.

// text ordinal and is therefore not present as a symbol in the symbols

// textord in unsupported command errors but cannot be parsed as a regular

// textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:

// texvc.sty

// that affect the behavior of \dots when in text mode.  So fine for now

// that follows a \color command.

// that the position of the superscripts and subscripts won't be

// that we are supposed to shift the limits by 1/2 of the slant,

// that we're passing an options parameter we should be able to fix

// the Latin capital letter M. This is close enough because

// the associated value may have a `className` specifying an extra CSS class

// the change in spacing).  We'll do roughly the same by detecting the

// the combined characters.

// the dot at U+22C5 and gives it punct spacing.

// the expansion of \noexpand is the token itself

// the function name

// the height of the expression, and the bottom of the HTML element

// the last line is empty.

// the macro expands to #2; otherwise, it expands to #3.

// the text of this token

// the token after \noexpand is interpreted as if its meaning

// the very long viniculumn, then down one extraViniculum distance,

// the vlist creation or separately when there are no limits.

// them in a span.

// these functions inside of math expressions, so we do some special

// they correspond to the font parameters of the extension fonts (family 3).

// they make no difference for now.

// they often put the operator by itself inside braces.

// things has an entry in the symbols table, so these will be turned

// things since `isMiddle` sounds like a boolean, but is a struct.

// this file above.

// this makes it more difficult for getCharacterMetrics() to

// this.

// tilde

// tilde1 is a modified version of a glyph from the MnSymbol package

// to \genfrac and \above.

// to add to the created `span`.

// to attach the superscripts and subscripts to the inner body (so

// to avoid processing groups multiple times.

// to break the line in the \newline case.

// to each tow (via the template)

// to the expression, but tests show that isn't how it actually works.

// tofrom is from glyph U+21C4 in font KaTeX AMS Regular

// token that comes after t (and possibly more tokens, if that token

// top edge and the strut's bottom edge will sit on the item's baseline,

// traversed as usual, then the detour resumes. It goes right, to the end of

// treated like a regular space character.  If a symbol or command is a key

// twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular

// types below. This narrowing is required to access `grp.base`.

// types for raw text tokens, and we want to avoid conflicts with higher-level

// unamibiguously determined from the passed-in `type` above.

// unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

// unicode-math maps U+F0 to \matheth. We map to AMS function \eth

// unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

// unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

// unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

// unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

// unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

// unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

// unicode-math says that \because is a mathord atom.

// unicode-math says that \therefore is a mathord atom.

// unless an undo is already in place, in which case that older

// use fonts added by a plugin

// use-begingroup-instead-of-bgroup

// used in \noexpand

// uses this return value.

// value is the correct one.

// values from the font glyph

// values match.

// values.

// vec is from glyph U+20D7 in font KaTeX Main

// vertical adjustment to match LaTeX.

// vertical alignment. So texHeight = span.height < span.style.height.

// we (currently) only care about the height of the glpyh

// we don't want to make the children type more generic since the children

// we have found an opening delimieter already.

// we reached the end, a }, or a \right)

// webpackBootstrap

// were ‘\relax’

// which doesn't affect spacing in math mode, i.e., is transparent.

// which we want to simulate the letter M.

// wideLatinLetterData contains exactly 26 chars on each row.

// widecheck paths are all inverted versions of widehat

// widehat1 is a modified version of a glyph from the MnSymbol package

// wider than the equation. We want the equation to control the

// width but extends to the right.  We use \rlap to get that spacing.

// will require new font glyphs.

// with \limits, so we need to assign supsub style.

// with no additional line-height spacing. This allows the item baseline to

// with small offsets. We use two copies. We omit the vertical offset because

// without expanding it; let’s call this token t. Then TeX reads the

// without overly expanding the containing line-box.

// won't happen in type-safe code

// won't know what to do with them.  This can only happen with

// works because the same htmlBuilder and mathmlBuilder are being used.

// would ordinarily be expanded by TeX’s expansion rules.

// wrap, since CSS will center a .clap > .inner > span

// xi10

// xi11

// xi12; cmex7: 0.611

// xi13; cmex7: 0.143

// xi8; cmex7: 0.049

// xi9

// you change size indexes, change that function.

// {123} and converts into symbol with code 123.  It is used by the *macro*

// {darray} is an {array} environment where cells are set in \displaystyle,

// {dcases} is a {cases} environment where cells are set in \displaystyle,

// {rcases} is another mathtools environment. It's brace is on the right side.

// {subarray} only recognizes "l" & "c"

// ≔

// ≕

//////////////////////////////////////////////////////////////////////

//TODO(edemaine): Not yet centered. Fix via \raisebox or #726

//\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}

//\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}

//\providecommand\ordinarycolon{:}
